#version 460 core
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable

// 
#include "./include/driver.glsl"
#include "./include/constants.glsl"
#include "./include/common.glsl"
#include "./include/framebuffer.glsl"
#include "./include/geometryRegistry.glsl"
#include "./include/instanceLevel.glsl"
#include "./include/material.glsl"
#include "./include/rayTracing.glsl"
#include "./include/external.glsl"

// 
layout (local_size_x = 32, local_size_y = 24, local_size_z = 1) in;


// TODO: real ray-tracing 
void main() 
{
    uvec2 launchId = gl_GlobalInvocationID.xy;
    ivec2 frameSize = textureSize(imageBuffers[0], 0);

    // 
    vec2 screenPos = (vec2(launchId)/vec2(frameSize))*2.f-1.f;
    vec4  farPosition = vec4(divW(vec4(screenPos, 0.9999f, 1.f) * constants.perspectiveInverse) * constants.lookAtInverse, 1.f);
    vec4 nearPosition = vec4(divW(vec4(screenPos, 0.0001f, 1.f) * constants.perspectiveInverse) * constants.lookAtInverse, 1.f);
    vec4 direction = vec4(normalize(farPosition.xyz - nearPosition.xyz), 0.f);

    // 
    RayData rays;
    rays.origin = nearPosition;
    rays.direction = direction;
    rays.launchId = u16vec2(launchId);

    //
    //IntersectionInfo results = rasterization(rays, 10000.f);
    IntersectionInfo results = traceRays(rays, 10000.f); // it working, but needs for second passes
    GeometryInfo geometryInfo = readGeometryInfo(results.instanceId, results.geometryId);
    uvec3 indices = readIndices(geometryInfo.index, results.primitiveId);
    AttributeMap attributeMap = readAttributes3x4(geometryInfo.attributes, indices);
    AttributeInterpolated attributes = interpolateAttributes(attributeMap, results.barycentric);
    MaterialInfo material = handleMaterial(geometryInfo.primitive.materials, attributes);
    InstanceInfo instanceInfo = instances[results.instanceId];

    // get vertices
    mat3x4 objectspace = readBindings3x4(geometryInfo.vertex, indices);
    //for (int i=0;i<3;i++) { objectspace[i] = vec4(vec4(objectspace[i] * geometryInfo.transform, 1.f) * instanceInfo.transform, 1.f); };

    //
    surroundNormal(attributes, objectspace);
    transformNormal(attributes, results.instanceId, results.geometryId);

    //
    vec4 testRasterData = material.baseColorFactor;

    // how from rasterization 
    vec4 coloring = vec4(testRasterData.xyz, 1.f);
    if (results.hitT >= 10000.f) { coloring.xyz = vec3(0.1f); };
    imageStore(fOutput[0], ivec2(launchId), vec4(coloring.xyz, 1.f));
};
